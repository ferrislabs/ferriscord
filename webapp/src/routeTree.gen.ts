/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as DmDmIdRouteImport } from './routes/dm.$dmId'
import { Route as DiscoveryServersRouteImport } from './routes/discovery.servers'
import { Route as ChannelsAtmeRouteImport } from './routes/channels.@me'
import { Route as ChannelsServerIdChannelIdRouteImport } from './routes/channels.$serverId.$channelId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const DmDmIdRoute = DmDmIdRouteImport.update({
  id: '/dm/$dmId',
  path: '/dm/$dmId',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoveryServersRoute = DiscoveryServersRouteImport.update({
  id: '/discovery/servers',
  path: '/discovery/servers',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsAtmeRoute = ChannelsAtmeRouteImport.update({
  id: '/channels/@me',
  path: '/channels/@me',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsServerIdChannelIdRoute =
  ChannelsServerIdChannelIdRouteImport.update({
    id: '/channels/$serverId/$channelId',
    path: '/channels/$serverId/$channelId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/channels/@me': typeof ChannelsAtmeRoute
  '/discovery/servers': typeof DiscoveryServersRoute
  '/dm/$dmId': typeof DmDmIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/channels/$serverId/$channelId': typeof ChannelsServerIdChannelIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/channels/@me': typeof ChannelsAtmeRoute
  '/discovery/servers': typeof DiscoveryServersRoute
  '/dm/$dmId': typeof DmDmIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/channels/$serverId/$channelId': typeof ChannelsServerIdChannelIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/channels/@me': typeof ChannelsAtmeRoute
  '/discovery/servers': typeof DiscoveryServersRoute
  '/dm/$dmId': typeof DmDmIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/channels/$serverId/$channelId': typeof ChannelsServerIdChannelIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/channels/@me'
    | '/discovery/servers'
    | '/dm/$dmId'
    | '/users/$userId'
    | '/channels/$serverId/$channelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/channels/@me'
    | '/discovery/servers'
    | '/dm/$dmId'
    | '/users/$userId'
    | '/channels/$serverId/$channelId'
  id:
    | '__root__'
    | '/'
    | '/channels/@me'
    | '/discovery/servers'
    | '/dm/$dmId'
    | '/users/$userId'
    | '/channels/$serverId/$channelId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChannelsAtmeRoute: typeof ChannelsAtmeRoute
  DiscoveryServersRoute: typeof DiscoveryServersRoute
  DmDmIdRoute: typeof DmDmIdRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  ChannelsServerIdChannelIdRoute: typeof ChannelsServerIdChannelIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dm/$dmId': {
      id: '/dm/$dmId'
      path: '/dm/$dmId'
      fullPath: '/dm/$dmId'
      preLoaderRoute: typeof DmDmIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery/servers': {
      id: '/discovery/servers'
      path: '/discovery/servers'
      fullPath: '/discovery/servers'
      preLoaderRoute: typeof DiscoveryServersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels/@me': {
      id: '/channels/@me'
      path: '/channels/@me'
      fullPath: '/channels/@me'
      preLoaderRoute: typeof ChannelsAtmeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels/$serverId/$channelId': {
      id: '/channels/$serverId/$channelId'
      path: '/channels/$serverId/$channelId'
      fullPath: '/channels/$serverId/$channelId'
      preLoaderRoute: typeof ChannelsServerIdChannelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChannelsAtmeRoute: ChannelsAtmeRoute,
  DiscoveryServersRoute: DiscoveryServersRoute,
  DmDmIdRoute: DmDmIdRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  ChannelsServerIdChannelIdRoute: ChannelsServerIdChannelIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
