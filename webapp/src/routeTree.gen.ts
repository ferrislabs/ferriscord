/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServersRouteImport } from './routes/servers'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as ServersServerIdRouteImport } from './routes/servers.$serverId'
import { Route as DmDmIdRouteImport } from './routes/dm.$dmId'
import { Route as ServersServerIdChannelsChannelIdRouteImport } from './routes/servers.$serverId.channels.$channelId'

const ServersRoute = ServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersServerIdRoute = ServersServerIdRouteImport.update({
  id: '/$serverId',
  path: '/$serverId',
  getParentRoute: () => ServersRoute,
} as any)
const DmDmIdRoute = DmDmIdRouteImport.update({
  id: '/dm/$dmId',
  path: '/dm/$dmId',
  getParentRoute: () => rootRouteImport,
} as any)
const ServersServerIdChannelsChannelIdRoute =
  ServersServerIdChannelsChannelIdRouteImport.update({
    id: '/channels/$channelId',
    path: '/channels/$channelId',
    getParentRoute: () => ServersServerIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/servers': typeof ServersRouteWithChildren
  '/dm/$dmId': typeof DmDmIdRoute
  '/servers/$serverId': typeof ServersServerIdRouteWithChildren
  '/users/$userId': typeof UsersUserIdRoute
  '/servers/$serverId/channels/$channelId': typeof ServersServerIdChannelsChannelIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/servers': typeof ServersRouteWithChildren
  '/dm/$dmId': typeof DmDmIdRoute
  '/servers/$serverId': typeof ServersServerIdRouteWithChildren
  '/users/$userId': typeof UsersUserIdRoute
  '/servers/$serverId/channels/$channelId': typeof ServersServerIdChannelsChannelIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/servers': typeof ServersRouteWithChildren
  '/dm/$dmId': typeof DmDmIdRoute
  '/servers/$serverId': typeof ServersServerIdRouteWithChildren
  '/users/$userId': typeof UsersUserIdRoute
  '/servers/$serverId/channels/$channelId': typeof ServersServerIdChannelsChannelIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/servers'
    | '/dm/$dmId'
    | '/servers/$serverId'
    | '/users/$userId'
    | '/servers/$serverId/channels/$channelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/servers'
    | '/dm/$dmId'
    | '/servers/$serverId'
    | '/users/$userId'
    | '/servers/$serverId/channels/$channelId'
  id:
    | '__root__'
    | '/'
    | '/servers'
    | '/dm/$dmId'
    | '/servers/$serverId'
    | '/users/$userId'
    | '/servers/$serverId/channels/$channelId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ServersRoute: typeof ServersRouteWithChildren
  DmDmIdRoute: typeof DmDmIdRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/servers': {
      id: '/servers'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof ServersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/$serverId': {
      id: '/servers/$serverId'
      path: '/$serverId'
      fullPath: '/servers/$serverId'
      preLoaderRoute: typeof ServersServerIdRouteImport
      parentRoute: typeof ServersRoute
    }
    '/dm/$dmId': {
      id: '/dm/$dmId'
      path: '/dm/$dmId'
      fullPath: '/dm/$dmId'
      preLoaderRoute: typeof DmDmIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/servers/$serverId/channels/$channelId': {
      id: '/servers/$serverId/channels/$channelId'
      path: '/channels/$channelId'
      fullPath: '/servers/$serverId/channels/$channelId'
      preLoaderRoute: typeof ServersServerIdChannelsChannelIdRouteImport
      parentRoute: typeof ServersServerIdRoute
    }
  }
}

interface ServersServerIdRouteChildren {
  ServersServerIdChannelsChannelIdRoute: typeof ServersServerIdChannelsChannelIdRoute
}

const ServersServerIdRouteChildren: ServersServerIdRouteChildren = {
  ServersServerIdChannelsChannelIdRoute: ServersServerIdChannelsChannelIdRoute,
}

const ServersServerIdRouteWithChildren = ServersServerIdRoute._addFileChildren(
  ServersServerIdRouteChildren,
)

interface ServersRouteChildren {
  ServersServerIdRoute: typeof ServersServerIdRouteWithChildren
}

const ServersRouteChildren: ServersRouteChildren = {
  ServersServerIdRoute: ServersServerIdRouteWithChildren,
}

const ServersRouteWithChildren =
  ServersRoute._addFileChildren(ServersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ServersRoute: ServersRouteWithChildren,
  DmDmIdRoute: DmDmIdRoute,
  UsersUserIdRoute: UsersUserIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
